This demo project shows how to make use of the machemu sdk to emulate an arcade machine, in this case, Space Invaders. It sets up and instance of Emulator::IMachine, adds the Space Invaders custom controllers and runs the machine.

Keyboard controls are as follows:

'q': Quit
'c': Credit
'1', 1P
'2': 2P
'a': 1P Left
's': 1P Fire
'd': 1P Right
'3', 3 Ships
'4', 4 Ships
'5', 5 Ships
'6', 6 Ships
't', Tilt
'e', Extra ship at
'j', 2P Left
'k', 2P Fire
'l', 2P Right
'i', Show coin info

NOTE: Space Invaders ROM files are not supplied but can be easily obtained online. Once you have them place them in the roms directory. There should be 4 roms and the demo expects the e, f, g and h roms to be named invaders-e.bin, invaders-f.bin, invaders-g.bin and invaders-h.bin.

NOTE: Space Invaders (currently) requires the SDL binaries to be installed in Windows/third_party.

To run the example project a sample Microsoft Visual Studio 2019 solution file is provided in the Windows directory called SpaceInvaders.sln. Note that only the x64 configuration is currently supported. There is only one project in the solution so it should be selected by default. Choose Debug or Release configuration, then build and run. 

Basic principles of operation:

1. Determine the memory and io layout of the target application.

	See SpaceInvaders.ixx module documentation which documents the memory and io layout for Space Invaders.

2. Write a memory and io controller which targets the desired application.

	See SpaceInvaders.cpp for a custom memory and io controller targeting Space Invaders.

3. Register these controllers with an instance of Emulator::IMachine.

	See main.cpp for IMachine instatiation and controller registration.

4. Run the machine.

	Once the previous prerequisites have been fulfilled, calling Emulator::IMachine::Run() will start the machine cpu execution loop.

Based on the principles of operation one can see how the machemu sdk can be used to create a multi arcade machine emulator.

1. Create an IMachine instance.
2. Register controllers for target application 'one'.
3. Run the machine for target application 'one' until an input device decides to exit the control loop.
4. When Run completes register controllers for target application 'two'.
5. Run the machine for target application 'two' until an input device decides to exit the control loop.
6. Repeat register and run sequence for n target applications.
